name: Build and Deploy to AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-north-1  
  ECR_REPOSITORY: networks-ca1
  CF_STACK_NAME: stack-for-networks-ca1

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Verify ECR repository exists
      run: |
        aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }}

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: latest
      run: |
        # Build the Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        
        # Push the Docker image
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy CloudFormation Stack
      run: |
        aws cloudformation deploy \
          --template-file "AWS cloudformation template.yml" \
          --stack-name ${{ env.CF_STACK_NAME }} \
          --parameter-overrides \
            ECRRepoName=${{ env.ECR_REPOSITORY }} \
            InstanceType=t3.micro \
          --capabilities CAPABILITY_IAM

    - name: Get Application URL
      run: |
        PUBLIC_DNS=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.CF_STACK_NAME }} \
          --query 'Stacks[0].Outputs[?OutputKey==`PublicDNS`].OutputValue' \
          --output text)
        echo "Application URL: http://$PUBLIC_DNS"
