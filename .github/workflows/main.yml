name: Build and Deploy to AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-north-1  
  ECR_REPOSITORY: networks-ca1
  CF_STACK_NAME: stack-for-networks-ca1

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Verify ECR repository exists
      run: |
        aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }}

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: latest
      run: |
        # Build the Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        
        # Push the Docker image
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-infrastructure:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy CloudFormation Stack
      run: |
        aws cloudformation deploy \
          --template-file "AWS cloudformation template.yml" \
          --stack-name ${{ env.CF_STACK_NAME }} \
          --parameter-overrides \
            ECRRepoName=${{ env.ECR_REPOSITORY }} \
            InstanceType=t3.micro \
          --capabilities CAPABILITY_IAM

    - name: Get Instance Information
      id: instance-info
      run: |
        PUBLIC_DNS=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.CF_STACK_NAME }} \
          --query 'Stacks[0].Outputs[?OutputKey==`PublicDNS`].OutputValue' \
          --output text)
        INSTANCE_ID=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.CF_STACK_NAME }} \
          --query 'Stacks[0].Outputs[?OutputKey==`InstanceId`].OutputValue' \
          --output text)
        echo "Application URL: http://$PUBLIC_DNS"
        echo "public_dns=$PUBLIC_DNS" >> $GITHUB_OUTPUT
        echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

  deploy-container:
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-infrastructure]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy Container to EC2
      run: |
        # Get instance info
        INSTANCE_ID="${{ needs.deploy-infrastructure.outputs.instance_id }}"
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        
        echo "Deploying container to instance: $INSTANCE_ID"
        
        # Use AWS SSM to run commands on the EC2 instance
        aws ssm send-command \
          --instance-ids "$INSTANCE_ID" \
          --document-name "AWS-RunShellScript" \
          --parameters "commands=[
            'set -eux',
            'echo \"Starting container deployment...\"',
            
            # Configure AWS region on EC2
            'aws configure set region ${{ env.AWS_REGION }}',
            
            # Login to ECR
            'aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com',
            
            # Stop and remove existing container
            'sudo docker stop myapp2 || true',
            'sudo docker rm myapp2 || true',
            
            # Pull latest image
            'sudo docker pull $ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest',
            
            # Run new container
            'sudo docker run -d --name myapp2 --restart=always -p 80:3000 $ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest',
            
            # Verify deployment
            'echo \"Container deployment completed\"',
            'sudo docker ps',
            'echo \"Testing application...\"',
            'curl -s http://localhost:80 || echo \"Application test failed\"'
          ]" \
          --output text
        
        echo "Container deployment command sent to EC2 instance"
        
        # Wait a bit and check command status
        sleep 30
        
        # Get the command status
        aws ssm list-commands --instance-id "$INSTANCE_ID" --query 'Commands[0].{Status:Status,Output:Output}' --output table

    - name: Verify Deployment
      run: |
        PUBLIC_DNS="${{ needs.deploy-infrastructure.outputs.public_dns }}"
        echo "Testing application at: http://$PUBLIC_DNS"
        
        # Test the application
        curl -f http://$PUBLIC_DNS --connect-timeout 30 --retry 3 --retry-delay 5 && \
        echo "✅ Application deployed successfully!" || \
        echo "❌ Application deployment verification failed"